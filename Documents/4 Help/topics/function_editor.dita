<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/topic.dtd" []>
<topic id="function_editor" xml:lang="en-us">
  <title>Function Editor</title>
  <prolog>
    <author>Ratnadip Choudhury</author>
    <copyright>
      <copyryear year="2011"/>
      <copyrholder>ROBERT BOSCH ENGINEERING AND BUSINESS SOLUTIONS LIMITED</copyrholder>
    </copyright>
    <metadata>
      <keywords>
        <indexterm>Function Editor</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>BUSMASTER can work as a programmable node over a CAN bus. User can program different event handlers using function editor. The programming language is C.</p>
    <p>Five types of event handlers are supported.<ul>
        <li>Message Handler</li>
        <li>Timer Handler</li>
        <li>Key Handler</li>
        <li>Error Handler</li>
        <li>Dll Handler</li>
      </ul></p>
    <p>These function handlers when built and loaded are executed on<ul>
        <li>Receipt of a Message.</li>
        <li>Elapse of a time interval.</li>
        <li>Press of a Key</li>
        <li>Detection of error or change in error state</li>
        <li>Loading / unloading of Dll.</li>
      </ul></p>
    <p>User can also include Header File names, add Global Variables and Utility Functions while programming the event handlers. All these functions can be edited and saved in a file with extension &quot;.c&quot;. The source file can be built to a DLL. This DLL can be loaded dynamically.</p>
    <p>There are three panes in function editor as shown below<ul>
        <li>Left Pane : Will be called Pane 1.</li>
        <li>Right Top Pane : Will be called Pane 2.</li>
        <li>Right Bottom Pane : Will be called Pane 3.</li>
      </ul></p>
    <p>Pane 1 displays the list of functions, included header files and global variables defined. Pane 2 displays the contents of the source file. Through Pane 3 User can edit the body of function selected.</p>
    <image href="../images/Function_Editor.bmp" placement="break"/>
    <section>
      <title>Create new source file</title>
      <p>User can create file by Selecting File Function Editor New menu option OR clicking on the tool bar button shown in figure below.</p>
    </section>
    <section>
      <title>Open a source file</title>
      <p>User can open a source file following the steps given below<ol>
          <li>Select <menucascade>
              <uicontrol>File</uicontrol>
              <uicontrol>Function Editor</uicontrol>
              <uicontrol>Open</uicontrol>
            </menucascade>. A File Open dialog will be displayed.</li>
          <li>Click on the Open tool bar button shown in figure below.<image href="../images/File_new.bmp" placement="break"/></li>
          <li>Select a source file and click on Open button.</li>
        </ol></p>
    </section>
    <section>
      <title>Save a source file</title>
      <p>User can save a source file by selecting <menucascade>
          <uicontrol>File</uicontrol>
          <uicontrol>Function Editor</uicontrol>
          <uicontrol>Save</uicontrol>
        </menucascade> menu option. Or by clicking on the tool bar button shown below.<image href="../images/FileOpen.bmp" placement="break"/></p>
      <p>User also have an option to save the file with different names. User can do this by following the steps given below<ol>
          <li>Select <menucascade>
              <uicontrol>File</uicontrol>
              <uicontrol>Function Editor</uicontrol>
              <uicontrol>Save As</uicontrol>
            </menucascade>.</li>
          <li>A Save As file dialog box will be displayed.</li>
          <li>Enter the file name. Click on Save button.</li>
        </ol></p>
    </section>
    <section>
      <title>Close a source file</title>
      <p>User can close a source file by selecting <menucascade>
          <uicontrol>File</uicontrol>
          <uicontrol>Function Editor</uicontrol>
          <uicontrol>Close</uicontrol>
        </menucascade>. A save message confirmation will be displayed if the file is modified.</p>
    </section>
    <image href="../images/FileSave.bmp" placement="break"/>
    <section>
      <title>Include Header file</title>
      <p>User can include a header filename while programming event handlers. To do so please follow the steps given below:<ol>
          <li>Select Include Headers category in the Pane 1 and right click.</li>
          <li>A pop-up menu comes up. Select Add. A dialog box appears.</li>
          <li>Click on Browse button to select the required header file name and click on OK button.</li>
          <li>The selected header filename will be added to the source file in the Pane 2 and also under Include Headers category in Pane 1.</li>
        </ol></p>
    </section>
    <section>
      <title>Edit Include Header File Name</title>
      <p>User can edit the name of the header file, to do so please follow the steps given below<ol>
          <li>Select the Include Header filename under Include Header category to be edited in the Pane 1 and Right click.</li>
          <li>A pop-up menu will be displayed.</li>
          <li>Select Edit.</li>
          <li>A dialog box will be displayed.</li>
          <li>Click on Browse button to select the required header file and click on OK button.</li>
        </ol></p>
      <p>The selected header file will be replaced with the previous header file in the source file in the Pane 2 and also under Include Headers category in Pane 1.</p>
    </section>
    <section>
      <title>Delete Handlers</title>
      <p>User can delete Header files, Message Handlers. Timer Handlers, Key Handlers, Error handlers, Dll handlers and Utility Functions in source file opened for editing, to do so follow the steps given below:<ol>
          <li>Select the item to be deleted in the Pane 1 and right click.</li>
          <li>A pop-up menu will be displayed.</li>
          <li>Select Delete.</li>
          <li>A confirmation message is displayed.</li>
          <li>Select Yes.</li>
        </ol></p>
      <p>The selected item’s definition will be deleted from the source file in the Pane 2 and also in Pane 1.</p>
    </section>
    <section>
      <title>Add Message Handler</title>
      <ol>
        <li>Select Message Handlers category in the Pane 1 and right click.</li>
        <li>A pop-up menu will be displayed.</li>
        <li>On selecting Add menu. A dialog as shown below pops up.<image href="../images/AddMsgHandler.bmp" placement="break"/></li>
        <li>From this dialog message handlers of different type can be selected. The different types of message handlers supported are<ul>
            <li>Message handler based on the message name.</li>
            <li>Message handler based on message ID.</li>
            <li>Message handler based on range of message ID.</li>
            <li>Message handler for all received messages.</li>
          </ul></li>
      </ol>
      <p>The type of message handler can be selected using the radio buttons. To add handler based on the message name the corresponding message should be available in the imported database. Multiple messages can be added from this dialog box by clicking on Apply button after selecting a message handler.</p>
      <p>Function definition will be added to the source file in the Pane 2 and the prototype under Message Handlers category in Pane 1.</p>
    </section>
    <section>
      <title>Add Timer Handler</title>
      <ol>
        <li>Select Timer Handlers category in the Pane 1 and right click.</li>
        <li>A pop-up menu will be displayed.</li>
        <li>Select Add. A dialog box appears.</li>
        <li>Enter Timer Handler Name like e.g., &quot;Time_One&quot; and the Timer Value in milliseconds.</li>
        <li>Select OK button.</li>
        <li>Function definition will be added to the source file automatically in the Pane 2 and the prototype under Timer Handlers category in Pane 1.</li>
      </ol>
      <note>
        <ul>
          <li>Adding a Sleep function inside a Timer handler might have an adverse effect on the application.</li>
          <li>Maximum of 16 timers can run simultaneously in cyclic mode. Anything above 16 will fail to start.</li>
        </ul>
      </note>
    </section>
    <section>
      <title>Add Key Handler</title>
      <ol>
        <li>Select Key Handlers category in the Pane 1 and right click.</li>
        <li>A pop-up menu will be displayed.</li>
        <li>Select Add. A dialog box appears asking the user to press a key.</li>
        <li>Press a key for which User want to write the handler. The same will be displayed in the dialog box.</li>
        <li>Select OK button or Apply button if more key handlers are to be added from the same dialog.</li>
      </ol>
      <p>Function definition will be added to the source file automatically in the Pane 2 and the prototype under Key Handlers category in Pane 1.</p>
    </section>
    <section>
      <title>Add Error Handler</title>
      <ol>
        <li>Select Error Handler’s category in the Pane 1 and right click.</li>
        <li>A pop-up menu will be displayed.</li>
        <li>Select Add. A dialog as shown below pops up from this dialog select the type of error handlers to he handled by your program and click on OK button.<image href="../images/AddErrHandler.bmp" placement="break"/></li>
      </ol>
      <p>Function definition will be added to the source file automatically in the Pane 2 and the prototype under Error Handlers category in Pane 1.</p>
    </section>
    <section>
      <title>Add DLLHandler</title>
      <p>DLL handlers are invoked at the time of loading the DLL or while unloading the DLL. The procedure for adding DLL handlers is similar to that of adding error handlers.</p>
    </section>
    <section>
      <title>Add Utility Function</title>
      <ol>
        <li>Select Utility Functions category in the Pane 1 and right click.</li>
        <li>A pop-up menu comes up.</li>
        <li>Select Add. A dialog box appears.</li>
        <li>Return Type of the utility function can be selected from the combo box or directly typed. The combo box will have primitive data types and database message structure names.</li>
        <li>Enter the Function Prototype in the Edit control like e.g., &quot;Func_One( int a, int b )&quot;.</li>
        <li>Select OK button.</li>
      </ol>
      <p>Function definition will be added to the source file automatically in the Pane 2 and the prototype under Utility Functions category in Pane 1.</p>
    </section>
    <section>
      <title>Global Variables</title>
      <p>To add/delete/modify global variables follow the steps given below.</p>
      <ol>
        <li>Select Global Variables category in the Pane 1 and double click.</li>
        <li>The Pane 3 will become editable and will show global variable block.</li>
        <li>Change this block to Add/Delete/Modify the global variables.</li>
      </ol>
      <p>Variable declaration will be added to the source file automatically in the Pane 2.</p>
      <note>
        <ul>
          <li>Use global variable block to use macros, structure or union definitions. The scope of variables and definitions given in this block is throughout the program.</li>
        </ul>
      </note>
    </section>
    <section>
      <title>Edit Function Body</title>
      <p>User can edit any function body by double clicking the prototype of the function displayed in Pane 1. On double click of the function prototype, the function body will be displayed in the Pane 3 and will be ready for editing.</p>
    </section>
    <section>
      <title>Variable of Message Type</title>
      <p>BUSMASTER defines structures for messages define in the database. User can use these structures while programming. Please follow the steps below to add variable of the message type<ol>
          <li>Edit the function for which database message name is to be added. (Refer: section Edit Function Body)</li>
          <li>Right click in the Pane 3.</li>
          <li>A pop-up menu is displayed.</li>
          <li>Select Insert Message. A dialog box is displayed with all the database messages under Message list.</li>
          <li>Choose a message from the list.</li>
          <li>Select the check box option in the dialog box.</li>
          <li>Click on Select button.</li>
        </ol></p>
      <p>The selected message variable will be displayed in the Pane 3 and the same is updated in the Pane 2.</p>
    </section>
    <section>
      <title>Insert Message name</title>
      <p>User can add a tag of message structure and this could be used for defining variables. Please follow the steps below to insert a message structure tag into the function.<ol>
          <li>Edit the function for which database message name is to be added. (Refer: section Edit Function Body)</li>
          <li>Right click in the Pane 3.</li>
          <li>A pop-up menu is displayed.</li>
          <li>Select Insert Message. A dialog box is displayed with all the database messages under Message list.</li>
          <li>Choose a message from the list and click on Select button.</li>
          <li>The selected message will be displayed in the Pane 3 and the same is updated in the Pane 2.</li>
        </ol></p>
    </section>
    <section>
      <title>Insert Signal name</title>
      <p>User can use signal names while programming. The signal names have to be used in conjunction with the corresponding message variable. It is member of message structure. Please follow the steps below to insert a signal name into the function.<ol>
          <li>Edit the function in which signal name is to be added. (Refer: section Edit Function Bodyedit_function_body)</li>
          <li>Right click in the Pane 3. A pop-up menu is displayed.</li>
          <li>Select Insert Signal. A dialog box is displayed with all the database messages under Message list.</li>
          <li>Choose a message from the list. A list of signals will be displayed under Signals list.</li>
          <li>Select a signal and click on Select button.</li>
          <li>The selected signal will be displayed in the Pane 3 and the same is updated in the Pane 2.</li>
        </ol></p>
    </section>
    <section>
      <title>Insert a Function</title>
      <p>BUSMASTER provides API functions, which can used while programming. These functions can be used to interact with BUSMASTER application. Please follow the steps below to insert a function<ol>
          <li>Edit the function for which prototype is to be added. (Refer: Editing Function Body)</li>
          <li>Right click in the Pane 3. A pop-up menu is displayed.</li>
          <li>Select Insert Function. A dialog box is displayed with a set of function prototypes. (API Listing)</li>
          <li>Choose required function prototype from the list and click on OK button.</li>
          <li>The selected function prototype will be displayed in the Pane 3 and the same is updated in the Pane 2.</li>
        </ol></p>
    </section>
  </body>
</topic>
